package Gold.d1023;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

// 참조 블로그: https://velog.io/@suk13574/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98Java%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BCDijkstra-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98

// 최소비용 경로에 포함된 도시 수 필요
// 최소비용 경로에 포함된 도시 방문 순서 필요
public class 최소비용구하기2_11779 {
	static class Node implements Comparable<Node>{
		int next;
		int cost;
		public Node(int next, int cost) {
			super();
			this.next = next;
			this.cost = cost;
		}
		
		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			return Integer.compare(this.cost, o.cost);
		}
	}
	static int N,M, from, to, dist[];
	static int nodeCnt=-1;
	static boolean[] visited;
	static List<Node>[] graph;
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		int fromC, toC, cost;
		
		N=Integer.parseInt(br.readLine());
		M=Integer.parseInt(br.readLine());
		
		graph=new ArrayList[N+1];
		for(int n=0;n<=N;n++) {
			graph[n]=new ArrayList<>();
		}
		dist=new int[N+1];
		visited=new boolean[N+1];
		
		Arrays.fill(dist, Integer.MAX_VALUE);
		
		for(int m=0;m<M;m++) {
			st=new StringTokenizer(br.readLine());
			
			fromC=Integer.parseInt(st.nextToken());
			toC=Integer.parseInt(st.nextToken());
			cost=Integer.parseInt(st.nextToken());
			
			graph[fromC].add(new Node(toC,cost));		
		}
		
		st=new StringTokenizer(br.readLine());
		
		from=Integer.parseInt(st.nextToken());
		to=Integer.parseInt(st.nextToken()); // 최종 목적지
		
		dijkstra(from);
		
		bw.write(dist[to]+"\n"); // 최소 비용
		//bw.write(nodeCnt+"\n");
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void dijkstra(int start) {
		PriorityQueue<Node> pq=new PriorityQueue<>();
		StringBuilder sb;
		
		Node nextNode;
		int nodeNow;
		
		pq.offer(new Node(start, 0));
		dist[start]=0;
		
		while(!pq.isEmpty()) {
			nextNode=pq.poll();
			
			nodeNow=nextNode.next;
			
			if(nodeNow==to) {
				break; // 도착
			}
			if(visited[nodeNow]==true) {
				continue; // 이미 방문함.
			}
			visited[nodeNow]=true;
			System.out.println("차례로 들리는중:"+nodeNow);
			
			for(Node nearby:graph[nodeNow]) {
				if(dist[nearby.next]>dist[nodeNow]+nearby.cost) {
					dist[nearby.next]=dist[nodeNow]+nearby.cost;
					// System.out.println("갱신하는중:"+nearby.next);
					pq.offer(new Node(nearby.next, dist[nearby.next]));
				}
			}
		}
		
	}

}
